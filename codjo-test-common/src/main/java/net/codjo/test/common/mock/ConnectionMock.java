/*
 * Team : AGF AM / OSI / SI / BO
 *
 * Copyright (c) 2001 AGF Asset Management.
 */
package net.codjo.test.common.mock;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Map;
import net.codjo.test.common.LogString;
/**
 * Mock une connection en BD.
 */
@SuppressWarnings({"UnusedDeclaration"})
public class ConnectionMock {
    private final LogString log;
    private Statement statement = null;
    private Connection stub = ProxyDelegatorFactory.getProxy(this, Connection.class);


    public ConnectionMock() {
        this(new LogString());
    }


    public Connection getStub() {
        return stub;
    }


    public ConnectionMock(LogString connectionLog) {
        log = connectionLog;
    }


    public Statement createStatement() throws SQLException {
        log.call("createStatement");
        return statement;
    }


    public void mockCreateStatement(Statement mock) {
        this.statement = mock;
    }


    public PreparedStatement prepareStatement(String sql) throws SQLException {
        log.call("prepareStatement", sql);
        return (PreparedStatement)statement;
    }


    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        log.call("prepareStatement", sql, "" + autoGeneratedKeys);
        return (PreparedStatement)statement;
    }


    public CallableStatement prepareCall(String sql) throws SQLException {
        log.call("prepareCall", sql);
        return (CallableStatement)statement;
    }


    public String nativeSQL(String sql) throws SQLException {
        log.call("nativeSQL", sql);
        return null;
    }


    public void setAutoCommit(boolean autoCommit)
          throws SQLException {
        log.call("setAutoCommit", "" + autoCommit);
    }


    public boolean getAutoCommit() throws SQLException {
        log.call("getAutoCommit");
        return false;
    }


    public void commit() throws SQLException {
        log.call("commit");
    }


    public void rollback() throws SQLException {
        log.call("rollback");
    }


    public void close() throws SQLException {
        log.call("close");
    }


    public boolean isClosed() throws SQLException {
        log.call("isClosed");
        return false;
    }


    public DatabaseMetaData getMetaData() throws SQLException {
        log.call("getMetaData");
        return null;
    }


    public void setReadOnly(boolean readOnly) throws SQLException {
        log.call("setReadOnly", "" + readOnly);
    }


    public boolean isReadOnly() throws SQLException {
        log.call("isReadOnly");
        return false;
    }


    public void setHoldability(int holdability) throws SQLException {
        log.call("setHoldability", "" + holdability);
    }


    public void setCatalog(String catalog) throws SQLException {
        log.call("setCatalog", catalog);
    }


    public String getCatalog() throws SQLException {
        log.call("getCatalog");
        return null;
    }


    public void setTransactionIsolation(int level)
          throws SQLException {
        log.call("setTransactionIsolation", "" + level);
    }


    public int getHoldability() throws SQLException {
        log.call("getHoldability");
        return 0;
    }


    public Savepoint setSavepoint() throws SQLException {
        log.call("setSavepoint");
        return null;
    }


    public Savepoint setSavepoint(String name) throws SQLException {
        log.call("setSavepoint", name);
        return null;
    }


    public void rollback(Savepoint savepoint) throws SQLException {
        log.call("rollback", savepoint);
    }


    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        log.call("releaseSavepoint", savepoint);
    }


    public int getTransactionIsolation() throws SQLException {
        log.call("getTransactionIsolation");
        return 0;
    }


    public SQLWarning getWarnings() throws SQLException {
        log.call("getWarnings");
        return null;
    }


    public void clearWarnings() throws SQLException {
        log.call("clearWarnings");
    }


    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        log.call("createStatement", "" + resultSetType, "" + resultSetConcurrency);
        return statement;
    }


    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
          throws SQLException {
        log.call("createStatement", "" + resultSetType, "" + resultSetConcurrency, "" + resultSetHoldability);
        return statement;
    }


    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
          throws SQLException {
        log.call("prepareStatement", sql, "" + resultSetType, "" + resultSetConcurrency);
        return (PreparedStatement)statement;
    }


    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
                                              int resultSetHoldability) throws SQLException {
        log.call("prepareStatement", sql, "" + resultSetType, "" + resultSetConcurrency,
                 "" + resultSetHoldability);
        return (PreparedStatement)statement;
    }


    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        log.call("prepareStatement", sql, columnIndexes);
        return (PreparedStatement)statement;
    }


    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        log.call("prepareStatement", sql,
                 (columnNames != null ? Arrays.asList(columnNames).toString() : "null"));
        return (PreparedStatement)statement;
    }


    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency)
          throws SQLException {
        log.call("prepareCall", sql, "" + resultSetType, "" + resultSetConcurrency);
        return (CallableStatement)statement;
    }


    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
                                         int resultSetHoldability) throws SQLException {
        log.call("prepareCall", sql, "" + resultSetType, "" + resultSetConcurrency,
                 "" + resultSetHoldability);
        return (CallableStatement)statement;
    }


    public Map<String, Class<?>> getTypeMap() throws SQLException {
        log.call("getTypeMap");
        return null;
    }


    public void setTypeMap(Map map) throws SQLException {
        log.call("setTypeMap", map);
    }


    public String callList() {
        return log.getContent();
    }
}
